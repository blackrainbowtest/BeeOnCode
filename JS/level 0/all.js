// Առաջադրանքներ 00 փոփոխականներ՝
// ՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝
// ԱՌԱՋԱԴՐԱՆՔ 1 : Ունենք 2 prompt`
// Առաջին prompt-ում մուտքագրվում թիվը, իսկ երկրորդում թվի աստիճանը, հաշվել մուտքագրված թվի համապատասխան աստիճանը
// Օրինակ՝ 4,2 թվերի դեպքում արդյունքը կլինի՝  4^2=16
// Հուշում՝  Խնդրի լուծման համար կարելի է օգտագործել JavaScript Math գրադարանը
// ՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝
// ԱՌԱՋԱԴՐԱՆՔ 2 : Ունենք 2 prompt`
// prompt-երում մուտքագրվում են թվեր: Առաջինում մուտքագրվում է թիվը, իսկ երկրորդում տոկոսը ։ Ցուցադրել թվի տոկոսը
// Օրինակ՝ 150 000  և  50 - ի դեպքում կցուցադրվի 150 000-ի 50 % - ը, այսինքն` 150000*50/100 = 7500։
// ՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝
// ԱՌԱՋԱԴՐԱՆՔ 3 : Ունենք 3 prompt`
// prompt - երում մուտքագրվում են թվեր, ստուգել այդ թվերից ուղղանկյուն եռանկյուն կարող է կառուցվել թե ոչ
// Օրինակ՝ 3,4,5 - ի դեպքում ցույց կտրվի դրական պատասխան,քանի որ թվերը դրական են  և 3**2 +4**2=5**2, մնացյալ դեպքերում  ցույց կտրվի error։
// ՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝
// ԱՌԱՋԱԴՐԱՆՔ 4 : Ունենք prompt, որտեղ մուտքագրվում է թիվ
// Ցուցադրել՝ արդյո՞ք տվյալ թիվը երկնիշ է, թե ոչ (օգտվել && օպերատորից)
// ՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝
// ԱՌԱՋԱԴՐԱՆՔ 5 : Ունենք 3 prompt, որտեղ գրվում են թվեր
// let a = prompt('Enter first Number: ');
// let b = prompt('Enter second Number: ');
// let c = prompt('Enter thrid Number: ');
// ստուգել՝ արդյո՞ք բոլոր թվերը հավասար են իրար 
// ՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝՝
// Լրացուցիչ առաջադրանք՝
// Ունենք prompt`
// prompt - ում մուտքագրվում է վայրկյանների քանակը, մուտքագրված վայրկյանները ձևափոխել օր/ժամ/րոպե/վայրկյան տեսքի և տպել.
// Օրինակ՝ 187801 վայրկյանի դեպքում արդյունքը կլինի՝ 2 օր, 4 ժամ, 10 րոպե, 1 վայրկյան

// Առաջադրանքներ 01 ցիկլներ՝
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 1։ Ունենք 2 prompt ։ Որոնցում մուտքագրվում են թվեր ։ Ցուցադրել, թե այդ թվերի արանքում քանի զույգ թիվ կա և թե որոնք են դրանք
// Օրինակ․՝ 2,9 թվերի դեպքում կստանանք հետևյալ արդյունքը ՝ “Առկա է 4 զույգ թիվ (2,4,6,8)”
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 2։ Ունենք prompt։ Ցուցադրել մուտքագրված թվի ֆակտորիալը
// Օրինակ․՝ 6 - ի դեպքում կստանանք 720 => 6! = 1*2*3*4*5*6 = 720
// Թվի ֆակտորիալը 1-ից մինչև այդ թիվը բոլոր թվերի արտադրյալն է
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 3։ Ունենք prompt ։ Երբ կմուտքագրվի թիվ ցուցադրել՝ արդյոք այդ թիվը 3 - ի աստիճան է թե ոչ ։
// Օրինակ․՝ 9 - ի դեպքում կստանանք այո քանզի 3^2 = 9 սակայն 6 -ի դեպքում ոչ
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 4։ Տպել առաջին երկնիշ թիվը, որը 17 -ով բազմապատկելիս ստացվում է 300 -ից մեծ թիվ
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 5։ Տպել 8 -րդ երկնիշ թիվը, որը 17 -ով բազմապատկելիս ստացվում է 300-ից մեծ թիվ
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 6։ a,b,c (ոչ իրար հավասար)  թվերը կոչվում են Պյութագորասյան եռյակ, եթե c2=a2+b2
// Օրինակ՝ 3,4,5 -ի դեպքում 25 = 16 + 9
// Ներկառուցված ցիկլերի օգնությամբ տպել մինչև 99 բոլոր Պյութագորասյան եռյակները
// -----------------------------------------------------------------------------------------------------------------------------------------
// Լրացուցիչ առաջադրանք՝
// Ունենք 2 prompt։ Առաջինում կմուտքագրվի X թիվ երկրորդում Y: Ցուցադրել թե առնվազն քանի անգամ պետք է X -ից հանվի Y 
// որպեսզի X -ը ստացվի ավելի փոքր քան X/2 (կեսը):
// Օրինակ․՝ X = 10  Y = 2։ Այս դեպքում կստացվի 3, քանի որ 10-ից եթե հանենք 3 հատ 2 , ապա արդյունքում կստացվի ավելի փոքր թիվ քան 5 -ը (10-ի կեսը)։


// Առաջադրանքներ 02: զանգվածներ՝
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 1։ Ստանալ նոր Y զանգված, որի մեջ ավելացնել X զանգվածի այն տարրերը, որոնք գտնվում են [10;20] հատվածում
// (5, 17, 28, 65, 45, 0, -14, 54, 65, 85, 45, -41, 12, 25, 10, 3, 6, 5, 98, 45, 10, 14, -14, 54, 87, 95, 75, 45, 8)
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 2։ Գտնել տրված զանգվածի երկրորդ մեծագույն տարրը
// (5, 17, 28, 65, 45, 0, -14, 54, 65, 85, 45, -41, 12, 25, 10, 3, 6, 5, 98, 45, 10, 14, -14, 54, 87, 95, 75, 45, 8)
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 3։ Տպել զանգվածում բոլոր զույգ թվերի արտադրյալը
// Օրինակ․՝ [1,2,3,4,5] -ի դեպքում կստանանք 8, քանի որ առկա է միայն 2 զույգ թիվ 2 և 4 , իսկ 2*4 =8
// (5, 17, 28, 65, 45, 0, -14, 54, 65, 85, 45, -41, 12, 25, 10, 3, 6, 5, 98, 45, 10, 14, -14, 54, 87, 95, 75, 45, 8)
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 4։ Զանգվածի բոլոր բացասական թվերը դարձնել 0
// Օրինակ․՝ [1,2,-5,-6,8] -ի դեպքում կստանանք [1,2,0,0,8]
// (5, 17, 28, 65, 45, 0, -14, 54, 65, 85, 45, -41, 12, 25, 10, 3, 6, 5, 98, 45, 10, 14, -14, 54, 87, 95, 75, 45, 8)
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 5։ Հաշվել զանգվածի միջին քառակուսայինը՝ (x[0]^2+x[1]^2 + .. + x[n - 1]^2)/n), որտեղ n == x.length
// (12, 45, 67, 23, 89, 34, 56, 78)
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 6։ Տպել զանգվածի այն տարրերը որոնք ավելի մեծ են քան զանգվածի տարրերի միջին թվաբանականը
// Օրինակ․՝ [1,2,3,4,5] -ի դեպքում միջին թվաբանականը կլինի (1+2+3+4+5)/5 = 3 ուստի պետք է տպել 4 և 5
// (12, 25, 37, 18, 40, 22, 15, 29)
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 6։ Զանգվածից հեռացնել կրկնվող տարրերը
// Օրինակ․՝ [55,44,55,30,30] -ի դեպքում կստանանք [55,44,30]
// (10, 23, 45, 10, 22, 45, 22, 33, 67, 89, 10, 45)
// -----------------------------------------------------------------------------------------------------------------------------------------
// Լրացուցիչ առաջադրանք՝ Հայտարարել զանգված՝ կազմված թվերից ։ Փոխել զանգվածի մեծագույն և փոքրագույն տարրերի տեղերը
// Օրինակ․՝ [1,2,3,4] -ի դեպքում կարող ենք ստանալ [4,2,3,1]
// (12, 34, 56, 78, 90, 23)


// Առաջադրանքներ 03: տողեր՝
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 1։ Ունենք կամայական տեքստ, տեքսից հեռացնել կրկնվող բառերը
// "Hello my dear friend. How are you my friend. I heard strange sounds in the yard. Can you check it out?"
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 2։ Ունենք կամայական տեքստ: prompt-ում մուտքագրում ենք x և y բառերը: Տեքստում x բառերը փոխարինել y բառով:
// "Hello my dear friend. How are you my friend. I heard strange sounds in the yard. Can you check it out?"
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 3։ Ունենք կամայական տեքստ, հաշվել, թե նրա բառերից քանիսն են սկսվում s տառով
// "The sun set over the horizon, painting the sky with shades of orange and pink. Birds chirped, and a gentle breeze rustled the leaves."
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 4։ Prompt-ում գրվում է տեքստ,  Տեքստում մեկից ավելի բացատները փոխարինել մի բացատով
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 5։ get_indexes(str, ch) - ֆունկցիան վերադարձնում է str տողի մեջ ch տառի հանդիպման բոլոր ինդեքսները
// Օրինակ՝ A1(“ararat”, “a”) -ի դեպքում կստանանք այսպիսի զանգված՝ [0,2,4], քանի որ a տառը “ararat”  բառի մեջ հանդիպում է 0, 2, և 4 ինդեքսներում
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 6։ is_interval(arr, x, y) - ստանում է զանգված և երկու թիվ, այն վերադարձնում է true, եթե զանգվածի թվերը գտնվում են միայն այս միջակայքում:
// Եթե զանգվածում առկա է այնպիսի թիվ, որը նշված միջակայքում չի, ֆունկցիան վերադարձնում է false
// Օրինակ՝ is_interval([5, 11, 15, 6, 25], 10, 20) -ի դեպքում կստանանք False


// Առաջադրանքներ 04: լյամբդա արտահայտություններ և անանուն ֆունկցիաներ՝
// Օգտագործելով անանուն ֆունկցիաներ, լյամբդա արտահայտություններ և զանգվածի հետ աշխատող ֆունկցիաներ իրականացնել հետեւյալ գործողությունները
// let arr = [5, 7, 17, 64, 23, 74, 96, 75, 41];
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 1։ Ամբողջ թվեր պարունակող arr զանգվածի յուրաքանչյուր անդամ մեծացնել 10 -ով
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 2։ Ամբողջ թվեր պարունակող arr զանգված-ից առանձնացնել (ֆիլտրել) այն տարրերը, որոնք 10-ով բազմապատկելիս ստացվում է 100-ից մեծ թիվ
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 3։ Անուններ պարունակող զանգվածը դասավորել այնպես, որ A տառով սկսվող անունները լինեն սկզբում
// let arr = ['Ani', 'Karen', 'Hamlet', 'Simon', 'Anastas', 'Anna', 'Karen', 'Artur', 'Ararat'];
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 4։ Անուններ պարունակող զանգվածը դասավորել այնպես, որ 6-ից մեծ կամ հավասար երկարություն ունեցող անունները լինեն սկզբում
// let arr = ['Ani', 'Karen', 'Hamlet', 'Simon', 'Anastas', 'Anna', 'Karen', 'Artur', 'Ararat'];
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 5։ Գրել ֆունկցիա լյամբդա արտահայտության շնորհիվ, որը տրված զանգվածից կհեռացնի բացասական թվերը
// let arr = [-5, 8, 17, -6, 41, 50, 20, -6, -8, 4, -1, 0, -8, 57];
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 6։ Գրել ֆունկցիա լյամբդա արտահայտության շնորհիվ, որը տեքստի յուրաքանչյուր սիմվոլից (տառ, թիվ, բացատ) առաջ ավելացնում է բացատ
// let str = 'Hello my dear friend. I am Ani and I am 18';
// -----------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 7։ Գրել ֆունկցիա լյամբդա արտահայտության շնորհիվ, որը կվերադարձնի զանգվածի այն տարրերը, որոնք 10-ի բազմապատիկ են
// let arr = [27, 0, 10, 15, 25, 66, 70, 95, 80, 142, 100, 154];


// Առաջադրանքներ 05: class և OOP՝
// --------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 1։ Ունենք օբյեկտների զանգված, որտեղ նկարագրվում են ուսանողի տվյալներ name, surname, university, raiting (իրենից ներկայացնում է գնահատականների 
// զանգված․ օր․՝ [10, 5, 2, 6, 5]), language (իրենից ներկայացնում է զանգված թե ինչ լեզուների է տիրապետում տվյալ ուսանողը. օր․՝ ['JavaScript', 
// 'C#', 'PHP', 'Python'])  դաշտերը
// let students = [
//     { name: 'Ani', surname: 'Sargsyan', 'university': 'NPUA', raiting: [5, 5, 6, 9, 10], 'language': ["Angular", "Laravel", "Node"] },
//     { name: 'Anna', surname: 'Hakobyan', 'university': 'NPUA', raiting: [6, 8, 7, 9, 7], 'language': ["Angular", "C#", "Node"] },
//     { name: 'Mark', surname: 'Winston', 'university': 'Acadia', raiting: [6, 8, 5, 4, 9], 'language': ["Laravel", "Node"] },
//     { name: 'John', surname: 'Smit', 'university': 'Laval', raiting: [2, 4, 5, 4, 4], 'language': ["HTML", "CPP"] },
//     { name: 'Sharsharet', surname: 'Hernehdash', 'university': 'UOT', raiting: [6, 6, 6, 7, 8], 'language': ["HTML"] },
//     { name: 'Karl', surname: 'Marks', 'university': 'UOT', raiting: [2, 7, 7, 8, 6], 'language': ["Bootstrap", "Node"] },
//     { name: 'Nerk', surname: 'Abdulamish', 'university': 'Peking', raiting: [8, 8, 7, 7, 8], 'language': ["JS", "Laravel", "Node"] },
//     { name: 'Zig', surname: 'Squerds', 'university': 'Peking', raiting: [4, 5, 4, 4, 6], 'language': ["Angular", "C#", "Node"] },
//     { name: 'Kargel', surname: 'Pertishep', 'university': 'NPUA', raiting: [5, 5, 6, 5, 4], 'language': ["Angular", "BASIC", "VBA"] },
//     { name: 'Meygard', surname: 'Humbergs', 'university': 'NUASA', raiting: [2, 2, 3, 4, 3], 'language': ["CPP", "C#", "Node"] },
// ]
// --------------------------------------------------------------------------------------------------------------------------------------
// Ցուցադրել բոլոր ուսանողների անուն, ազգանունը և միջին բալը document.write() -ի օգնությամբ
// Հուշում՝ let number = 5; document.write(՝<p>${number}</p>՝);
// --------------------------------------------------------------------------------------------------------------------------------------
// Ցուցադրել այն ուսանողների անուն, ազգանունը և համալսարանը, որոնք տրապետում են C# ծրագրավորման լեզվին
// Հուշում՝ Կարող եք օգտագործել includes() ֆունկցիան
// --------------------------------------------------------------------------------------------------------------------------------------
// Տպել այն ուսանողների տվյալները, որոնք ունեն գոնե մեկ 2 (raiting -ում)
// Հուշում՝ Օգտագործեք some() ֆունկցիան
// --------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 2։ Ունենք օբյեկտների զանգված, որտեղ նկարագրվում են ուսանողի տվյալներ՝ անուն, ազգանուն, դասամատյանի համար։ Տպել 11-20 դասամատյանի համար
// ունեցող այն ուսանողների ցուցակը, որոնց անունը և ազգանունը սկսվում են `A` տառով։
// let pupils = [
//     { name: 'Anna', surname: 'Sargsyan', textbook: 4 },
//     { name: 'Kimberly', surname: 'Smith', textbook: 5 },
//     { name: 'Anka', surname: 'Almaz', textbook: 15 },
//     { name: 'Donald', surname: 'Thomas', textbook: 221 },
//     { name: 'Steven', surname: 'Anderson', textbook: 45 },
//     { name: 'Betty', surname: 'Jones', textbook: 2 },
//     { name: 'Nancy', surname: 'Miller', textbook: 34 },
//     { name: 'Kevin', surname: 'Davis', textbook: 13 },
//     { name: 'George', surname: 'Garcia', textbook: 8 },
//     { name: 'John', surname: 'Rodriguez', textbook: 4 },
//     { name: 'George', surname: 'Wilson', textbook: 75 },
//     { name: 'Amy', surname: 'Adams', textbook: 18 },
//     { name: 'Karen', surname: 'Perez', textbook: 43 },
//     { name: 'Jessica', surname: 'Walker', textbook: 11 },
//     { name: 'Sarah', surname: 'Robinson', textbook: 10 },
//     { name: 'Thomas', surname: 'Lewis', textbook: 7 },
//     { name: 'Joseph', surname: 'Clark', textbook: 20 },
//     { name: 'Richard', surname: 'Harris', textbook: 21 },
//     { name: 'William', surname: 'Lee', textbook: 1 }
// ]
// --------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 3։ Ստեղծեք Person կլասը։ Person կլասին բնութագրում է name, surname, age դաշտերը։ print մեթոդը պետք է տպի մարդու անուն
// ազգանունը և տարիքը
// let persons = [
//     new Person('Ani', 'Sargsyan', 35),
//     new Person('Mane', 'Hakobyan', 82),
//     new Person('Arman', 'Sahakyan', 75),
//     new Person('Aram', 'Manukyan', 16),
//     new Person('Armine', 'Asatryan', 13),
//     new Person('Karine', 'Sargsyan', 36),
//     new Person('Narine', 'Hakobyan', 83),
//     new Person('Marine', 'Sahakyan', 73),
//     new Person('Nune', 'Manukyan', 17),
//     new Person('Sulva', 'Asatryan', 12)
// ]
// --------------------------------------------------------------------------------------------------------------------------------------
// Տպեք մարդկանց տվյալները, ըստ տարիքի աճման կարգի՝ օգտագորպելով .tpel() մեթոդը
// --------------------------------------------------------------------------------------------------------------------------------------
// Տպել ամենածեր մարդու տվյալը՝ օգտագորպելով .tpel() մեթոդը


// Առաջադրանքներ 06: class և OOP՝
// --------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 1։ Ունենք Project կլասը, որը բնութագրում է պրոյեկտին: Կլասի դաշտերն են.
// name - պրոյեկտի անվանումը
// languages - օգտագրոծված ծրագրավորման լեզուների զանգվածը:
// Օրինակ՝ let project1 = new Project("Marketing Site", ["JS", "Angular","CSS"]);
// Ունենք նաև Developer կլասը, որը ինֆորմացիա է պարունակում ծրագրավորողի մասին: Կլասի դաշտերն են.
// name - Անուն
// surname - ազգանուն
// photo - նկարը
// projects - զանգված (this.projects = []), որի մեջ կպահպանվեն նրա կատարած պրոյեկտները (օբյեկտն է Project կլասից)
// Developer կլասի մեթոդներն են
// addProject(newProject) - projects զանգվածին ավելացնում է newProject պրոեկտի-ի տվյալը
// toString - էկրանին տպում է տվյալ ծրագրավորողի տվյալը և նրա կատարած պրոյեկտների տվյալները
// Օրինակ՝
// let p = new Developer("Hayk", "Davtyan", "1.jpg");
// p.addProject(new Project("Basic Store", ["AngularJS", "PHP"]));
// p.addProject(new Project("Social Network", ["Node.js", "React.js"]));
// p.addProject(new Project("3D Snake Game", ["JS", "Canvas","CSS3"]));
// p.toString();
// ֆունկցիան կանչելու դեպքում էկրանին կհայտնվի ծրագրավորողի տվյալը։

// Առաջադրանքներ 07: setTimeout և setInterval՝
// --------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 1: Ունենք getRandomNumber(a = 1, b = 2) ֆունկցիան, որը ստանում է 2 պարամետր և յուրաքանչյուր 1000 միլիվայրկյան ինտերվալը(setInterval) մեկ 
// գեներացնում է պատահական թիվ (Math.random()), եթե գեներացված թիվը գտնվում է a-ից b միջակայքում  ապա Promise-ի  resolve-ի միջոցով վերադարձնում է (return) արդյունքը:
// async function Spinner(a, b) ֆունկցիայի մեջ անհրաժեշտ է 5 անգամ կանչել getRandomNumber(a, b); ֆունկցիան, և վերջում համեմատել վերադարձրած արժեքները,
// եթե բոլորը արժեքները մինյանց հավասար են, ապա alert-ի կամ document.write-ի միջոցով էկրանին տպել "WIN!!!!", եթե ոչ` "LOSE!!!!".
// Spinner(1,1) -ի դեպքում հաղթելու հավանականությունը կլինի 100%, իսկ Spinner(1,2) -ի դեպքում՝ 6.25%
// --------------------------------------------------------------------------------------------------------------------------------------
// Առաջադրանք 2: Ստեղծել սուրճի մեքենայի իմիտացիա, որը կստանա պատվերներ տարբեր տեսակի սուրճերի համար և կցուցադրի պատրաստման գործընթացը քայլ առ քայլ։
// Օգտագործողը կարող է պատվիրել երեք տեսակի սուրճ՝ espresso, latte կամ cappuccino։ Եթե օգտվողը փորձի պատվիրել անթույլատրելի տեսակի սուրճ (օրինակ, "tea"), 
// սուրճի մեքենան պետք է տեղեկացնի դրա մասին։
// Ստեղծեք makeCoffee(coffeeType) ֆունկցիա, որը ստանում է մեկ փոփոխական՝ սուրճի տեսակը(անունը)։ Եթե սուրճի տեսակը անթույլատրելի է, ֆունկցիան պետք է վերադարձնի սխալ։
// Օգտագործեք console.log() հաղորդագրությունները ցուցադրելու համար։
// Ցուցադրեք սուրճ պատրաստելու քայլերը, ինչպիսիք են՝ "Տեղադրում ենք բաժակը", "Լցնում ենք ջուր", "Ավելացնում ենք սուրճ", "Ավելացնում ենք շաքարավազ", "Խառնում ենք"
// Պատվերները պետք է իրականացվեն սինխրոն։ Անհրաժեշտ է օգտագործել async/await ասինխրոն գործողությունները կառավարելու համար։
// Հուշում՝ վերհիշեք Promise((reslove, reject) => {})
// Նմուշ։ https://prnt.sc/6lfd6NFlhYX8



// function makeCoffee(coffeeType) {
//     return new Promise((resolve, reject) => {
//       const validCoffeeTypes = ["espresso", "latte", "cappuccino"];
  
//       if (!validCoffeeTypes.includes(coffeeType)) {
//         reject(`Սարքը չի կարող տրամադրել ${coffeeType}։`);
//       } else {
//         const steps = ["Տեղադրում ենք բաժակը։", "Լցնում ենք ջուր։", "Ավելացնում ենք սուրճ։"];
  
//         if (coffeeType === "latte" || coffeeType === "cappuccino") {
//           steps.push("Ավելացնում ենք շաքարավազ։");
//         }
  
//         steps.push("Խառնում ենք։");
//         steps.push(
//           `Ձեր ${coffeeType.charAt(0).toUpperCase() + coffeeType.slice(1)}-ն պատրաստ է!`
//         );
  
//         let stepIndex = 0;
  
//         const interval = setInterval(() => {
//           console.log(steps[stepIndex]);
//           stepIndex++;
  
//           if (stepIndex === steps.length) {
//             clearInterval(interval);
//             setTimeout(() => resolve(steps[steps.length - 1]), 1000);
//           }
//         }, 1000); // 1 վարկյան
//       }
//     });
//   }
  
//   // Պատվերի գրանցման ֆունկցիա
//   async function orderCoffee(coffeeType) {
//     try {
//       console.log(`Դուք պատվիրել եք՝ ${coffeeType}։`);
//       await makeCoffee(coffeeType);
//     } catch (error) {
//       console.log(error);
//     }
//   }
  
//   // Պատվերների սինխրոնիզացված կանչ
//   async function processOrders() {
//     await orderCoffee("espresso"); // առանց շաքարավազի
//     await orderCoffee("latte");
//     await orderCoffee("cappuccino");
//     await orderCoffee("tea");
//   }
  
//   processOrders();
  